import copy
class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None


def lowestCommonAncestor(root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
    nodes_p = []
    node = root
    while node != None:
        nodes_p.append(node)
        if node.val == p.val:
            break
        elif node.val > p.val:
            node = node.left
        else:
            node = node.right
    pat = root
    node = root
    while node != None:
        if node in nodes_p:
            pat = node
        else:
            break
        if node.val == q.val:
            break
        elif node.val > q.val:
            node = node.left
        else:
            node = node.right
    return pat

def load(nums)-> TreeNode:
    l = int(len(nums)/2)
    list_node = [None for i in nums]
    head = TreeNode(nums[0])
    for i in range(l):
        if i == 0:
            head = TreeNode(nums[i])
            list_node[i] = head
        node_i = list_node[i]
        left = None
        right = None
        if 2 * i + 1 < len(nums) and nums[2 * i + 1] != None:
            left = TreeNode(nums[2 * i + 1])
        if 2 * i + 2 < len(nums) and nums[2 * i + 2] != None:
            right = TreeNode(nums[2 * i + 2])
        if node_i == None:
            continue
        node_i.left = left
        node_i.right = right
        if 2 * i + 1 < len(nums):
            list_node[2 * i + 1] = left
        if 2 * i + 2 < len(nums):
            list_node[2 * i + 2] = right
    return head


def lowestCommonAncestor(root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
     pa_node = node_path(root)
     pa_path = []
     while p != None:
         pa_path.insert(0, p)
         p = pa_node.get(p)
     node = None
     while q != None:
         if p in pa_path:
             node = p
             break
     return node

def node_path(root: TreeNode):
    node = root
    pa_node = {}
    right_nodes = []
    pa_node[root] = None
    while node != None or len(right_nodes) >= 0:
        if node != None:
            if node.right != None:
                right_nodes.append(node.right)
                pa_node[node.right] = node
            if node.left != None:
                pa_node[node.left] = node
                node = node.left
            elif len(right_nodes) > 0:
                node = right_nodes.pop()
            else:
                break
    return pa_node
    pa_key = pa_node.keys()
    # for k in pa_key:
    #     node = TreeNode(k.val)
    #     pa_node[node] = pa_node.get(k)
    #     pa_node.pop(k)
    return pa_node

def reverseString(s:[str]) -> None:
    l = len(s) - 1
    for i in range(l):
        j = l - i
        if j <= i:
            break
        else:
            s_ = s[i]
            s[i] = s[j]
            s[j] = s_

def rotate(matrix: [[int]]) -> None:
    matrix_new = copy.deepcopy(matrix)
    n = len(matrix)
    for i in range(n):
        for j in range(n):
            matrix[j][n - 1- i] = matrix_new[i][j]

def groupAnagrams(strs: [str]) -> [[str]]:
    list_set = []
    list_value = []
    for ss in strs:
        s_set = get_min(ss)
        if s_set in list_set:
            res_ss = list_value[list_set.index(s_set)]
            res_ss.append(ss)
            list_value[list_set.index(s_set)] = res_ss
        else:
            list_set.append(s_set)
            list_value.append([ss])
    return list_value


#用质数可以完美避免相同
def get_min(ss)-> str:
    arr = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101]
    cou = 1
    for i in ss:
        cou *= arr[ord(i) - ord('a')]
    return cou

def solveNQueens(n: int) -> [[str]]:
    if n == 1:
        return [['q']]
    res = []
    input_ = [[] for i in range(n)]

    res_i = []
    i = 0
    while i >= 0:
        for s in range(n):
            if s not in input_[i] and s not in res_i:
                if i == 0:
                    res_i.append(s)
                    input_[i].append(s)
                    break
                else:
                    find = 0
                    for r in range(i):
                        if res_i[r] - r == s - i or res_i[r] + r == s + i:
                            find = 1
                            break
                    if find == 0:
                        res_i.append(s)
                        input_[i].append(s)
                        break
        if len(res_i) == 0:
            break
        if len(res_i) <= i:
            res_i.pop(i - 1)
            i = i - 1
            for x in range(i + 1, n):
                input_[x] = []
        elif len(res_i) == n:
            # res.append(res_i[:])
            rr = []
            for xx in res_i:
                ss = ''
                for xxx in range(n):
                    if xxx == xx:
                        ss += 'q'
                    else:
                        ss += '.'
                rr.append(ss)
            res.append(rr)
            input_[n - 1] = []
            res_i.pop()
            res_i.pop()
            i = n - 2
        else:
            i += 1
    return  res







if __name__ == '__main__':
    # nums = [6, 2, 8, 0, 4, 7, 9, None, None, 3, 5]
    # p = TreeNode(2)
    # q = TreeNode(4)
    # root = load(nums)
    # matrix =[
    #     [5, 1, 9, 11],
    #     [2, 4, 8, 10],
    #     [13, 3, 6, 7],
    #     [15, 14, 12, 16]]
    # rotate(matrix)
    # print(matrix)

    # list_str = ["eat","tea","tan","ate","nat","bat"]
    # prod = groupAnagrams(list_str)
    # print(prod)
    pred = (solveNQueens(8))
    test = [["Q.......","....Q...",".......Q",".....Q..","..Q.....","......Q.",".Q......","...Q...."],["Q.......",".....Q..",".......Q","..Q.....","......Q.","...Q....",".Q......","....Q..."],["Q.......","......Q.","...Q....",".....Q..",".......Q",".Q......","....Q...","..Q....."],["Q.......","......Q.","....Q...",".......Q",".Q......","...Q....",".....Q..","..Q....."],[".Q......","...Q....",".....Q..",".......Q","..Q.....","Q.......","......Q.","....Q..."],[".Q......","....Q...","......Q.","Q.......","..Q.....",".......Q",".....Q..","...Q...."],[".Q......","....Q...","......Q.","...Q....","Q.......",".......Q",".....Q..","..Q....."],[".Q......",".....Q..","Q.......","......Q.","...Q....",".......Q","..Q.....","....Q..."],[".Q......",".....Q..",".......Q","..Q.....","Q.......","...Q....","......Q.","....Q..."],[".Q......","......Q.","..Q.....",".....Q..",".......Q","....Q...","Q.......","...Q...."],[".Q......","......Q.","....Q...",".......Q","Q.......","...Q....",".....Q..","..Q....."],[".Q......",".......Q",".....Q..","Q.......","..Q.....","....Q...","......Q.","...Q...."],["..Q.....","Q.......","......Q.","....Q...",".......Q",".Q......","...Q....",".....Q.."],["..Q.....","....Q...",".Q......",".......Q","Q.......","......Q.","...Q....",".....Q.."],["..Q.....","....Q...",".Q......",".......Q",".....Q..","...Q....","......Q.","Q......."],["..Q.....","....Q...","......Q.","Q.......","...Q....",".Q......",".......Q",".....Q.."],["..Q.....","....Q...",".......Q","...Q....","Q.......","......Q.",".Q......",".....Q.."],["..Q.....",".....Q..",".Q......","....Q...",".......Q","Q.......","......Q.","...Q...."],["..Q.....",".....Q..",".Q......","......Q.","Q.......","...Q....",".......Q","....Q..."],["..Q.....",".....Q..",".Q......","......Q.","....Q...","Q.......",".......Q","...Q...."],["..Q.....",".....Q..","...Q....","Q.......",".......Q","....Q...","......Q.",".Q......"],["..Q.....",".....Q..","...Q....",".Q......",".......Q","....Q...","......Q.","Q......."],["..Q.....",".....Q..",".......Q","Q.......","...Q....","......Q.","....Q...",".Q......"],["..Q.....",".....Q..",".......Q","Q.......","....Q...","......Q.",".Q......","...Q...."],["..Q.....",".....Q..",".......Q",".Q......","...Q....","Q.......","......Q.","....Q..."],["..Q.....","......Q.",".Q......",".......Q","....Q...","Q.......","...Q....",".....Q.."],["..Q.....","......Q.",".Q......",".......Q",".....Q..","...Q....","Q.......","....Q..."],["..Q.....",".......Q","...Q....","......Q.","Q.......",".....Q..",".Q......","....Q..."],["...Q....","Q.......","....Q...",".......Q",".Q......","......Q.","..Q.....",".....Q.."],["...Q....","Q.......","....Q...",".......Q",".....Q..","..Q.....","......Q.",".Q......"],["...Q....",".Q......","....Q...",".......Q",".....Q..","Q.......","..Q.....","......Q."],["...Q....",".Q......","......Q.","..Q.....",".....Q..",".......Q","Q.......","....Q..."],["...Q....",".Q......","......Q.","..Q.....",".....Q..",".......Q","....Q...","Q......."],["...Q....",".Q......","......Q.","....Q...","Q.......",".......Q",".....Q..","..Q....."],["...Q....",".Q......",".......Q","....Q...","......Q.","Q.......","..Q.....",".....Q.."],["...Q....",".Q......",".......Q",".....Q..","Q.......","..Q.....","....Q...","......Q."],["...Q....",".....Q..","Q.......","....Q...",".Q......",".......Q","..Q.....","......Q."],["...Q....",".....Q..",".......Q",".Q......","......Q.","Q.......","..Q.....","....Q..."],["...Q....",".....Q..",".......Q","..Q.....","Q.......","......Q.","....Q...",".Q......"],["...Q....","......Q.","Q.......",".......Q","....Q...",".Q......",".....Q..","..Q....."],["...Q....","......Q.","..Q.....",".......Q",".Q......","....Q...","Q.......",".....Q.."],["...Q....","......Q.","....Q...",".Q......",".....Q..","Q.......","..Q.....",".......Q"],["...Q....","......Q.","....Q...","..Q.....","Q.......",".....Q..",".......Q",".Q......"],["...Q....",".......Q","Q.......","..Q.....",".....Q..",".Q......","......Q.","....Q..."],["...Q....",".......Q","Q.......","....Q...","......Q.",".Q......",".....Q..","..Q....."],["...Q....",".......Q","....Q...","..Q.....","Q.......","......Q.",".Q......",".....Q.."],["....Q...","Q.......","...Q....",".....Q..",".......Q",".Q......","......Q.","..Q....."],["....Q...","Q.......",".......Q","...Q....",".Q......","......Q.","..Q.....",".....Q.."],["....Q...","Q.......",".......Q",".....Q..","..Q.....","......Q.",".Q......","...Q...."],["....Q...",".Q......","...Q....",".....Q..",".......Q","..Q.....","Q.......","......Q."],["....Q...",".Q......","...Q....","......Q.","..Q.....",".......Q",".....Q..","Q......."],["....Q...",".Q......",".....Q..","Q.......","......Q.","...Q....",".......Q","..Q....."],["....Q...",".Q......",".......Q","Q.......","...Q....","......Q.","..Q.....",".....Q.."],["....Q...","..Q.....","Q.......",".....Q..",".......Q",".Q......","...Q....","......Q."],["....Q...","..Q.....","Q.......","......Q.",".Q......",".......Q",".....Q..","...Q...."],["....Q...","..Q.....",".......Q","...Q....","......Q.","Q.......",".....Q..",".Q......"],["....Q...","......Q.","Q.......","..Q.....",".......Q",".....Q..","...Q....",".Q......"],["....Q...","......Q.","Q.......","...Q....",".Q......",".......Q",".....Q..","..Q....."],["....Q...","......Q.",".Q......","...Q....",".......Q","Q.......","..Q.....",".....Q.."],["....Q...","......Q.",".Q......",".....Q..","..Q.....","Q.......","...Q....",".......Q"],["....Q...","......Q.",".Q......",".....Q..","..Q.....","Q.......",".......Q","...Q...."],["....Q...","......Q.","...Q....","Q.......","..Q.....",".......Q",".....Q..",".Q......"],["....Q...",".......Q","...Q....","Q.......","..Q.....",".....Q..",".Q......","......Q."],["....Q...",".......Q","...Q....","Q.......","......Q.",".Q......",".....Q..","..Q....."],[".....Q..","Q.......","....Q...",".Q......",".......Q","..Q.....","......Q.","...Q...."],[".....Q..",".Q......","......Q.","Q.......","..Q.....","....Q...",".......Q","...Q...."],[".....Q..",".Q......","......Q.","Q.......","...Q....",".......Q","....Q...","..Q....."],[".....Q..","..Q.....","Q.......","......Q.","....Q...",".......Q",".Q......","...Q...."],[".....Q..","..Q.....","Q.......",".......Q","...Q....",".Q......","......Q.","....Q..."],[".....Q..","..Q.....","Q.......",".......Q","....Q...",".Q......","...Q....","......Q."],[".....Q..","..Q.....","....Q...","......Q.","Q.......","...Q....",".Q......",".......Q"],[".....Q..","..Q.....","....Q...",".......Q","Q.......","...Q....",".Q......","......Q."],[".....Q..","..Q.....","......Q.",".Q......","...Q....",".......Q","Q.......","....Q..."],[".....Q..","..Q.....","......Q.",".Q......",".......Q","....Q...","Q.......","...Q...."],[".....Q..","..Q.....","......Q.","...Q....","Q.......",".......Q",".Q......","....Q..."],[".....Q..","...Q....","Q.......","....Q...",".......Q",".Q......","......Q.","..Q....."],[".....Q..","...Q....",".Q......",".......Q","....Q...","......Q.","Q.......","..Q....."],[".....Q..","...Q....","......Q.","Q.......","..Q.....","....Q...",".Q......",".......Q"],[".....Q..","...Q....","......Q.","Q.......",".......Q",".Q......","....Q...","..Q....."],[".....Q..",".......Q",".Q......","...Q....","Q.......","......Q.","....Q...","..Q....."],["......Q.","Q.......","..Q.....",".......Q",".....Q..","...Q....",".Q......","....Q..."],["......Q.",".Q......","...Q....","Q.......",".......Q","....Q...","..Q.....",".....Q.."],["......Q.",".Q......",".....Q..","..Q.....","Q.......","...Q....",".......Q","....Q..."],["......Q.","..Q.....","Q.......",".....Q..",".......Q","....Q...",".Q......","...Q...."],["......Q.","..Q.....",".......Q",".Q......","....Q...","Q.......",".....Q..","...Q...."],["......Q.","...Q....",".Q......","....Q...",".......Q","Q.......","..Q.....",".....Q.."],["......Q.","...Q....",".Q......",".......Q",".....Q..","Q.......","..Q.....","....Q..."],["......Q.","....Q...","..Q.....","Q.......",".....Q..",".......Q",".Q......","...Q...."],[".......Q",".Q......","...Q....","Q.......","......Q.","....Q...","..Q.....",".....Q.."],[".......Q",".Q......","....Q...","..Q.....","Q.......","......Q.","...Q....",".....Q.."],[".......Q","..Q.....","Q.......",".....Q..",".Q......","....Q...","......Q.","...Q...."],[".......Q","...Q....","Q.......","..Q.....",".....Q..",".Q......","......Q.","....Q..."]]
    for i in pred:
        if i not in test:
            print(i)